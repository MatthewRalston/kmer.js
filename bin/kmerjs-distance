#!/usr/bin/env node


const Promise = require('bluebird');
const program = require('commander');
const Type = require('type-of-is');
// Kmer.js
const kmerConstructor = require('./../kmer');
const reader = require('./../app/readProfile').getProfile;
const logger = require('./../app/loadLogger').logger;
// Initialize
var k = 12;
const validDistances = ['correlation', 'euclidean'];


// CLI
program
    .description('Creates a correlation matrix of sequence profiles')
    .arguments('<seqpath1> <seqpath2> [otherSeqPaths...]')
    .option('-k <k>', `k-mer size to use. (default: ${k})`, parseInt)
    .option('-d, --distance <dist>', `distance metric to use: ${validDistances}`, 'correlation')
    .option('--strand-specific', 'Read profile from forward strand only')
    .option('-v, --verbose', 'Enable log-level debugging')
    .action(function(seqpath1, seqpath2, otherSeqPaths, options){
	if (options.strandSpecific === undefined) options.strandSpecific = false;
	if (options.verbose) logger.level = 'debug';
	if (options.K === undefined) options.K = k;
	if (!Type.is(options.K, Number)) {
	    logger.error(`option k must be an integer: ${options.K}`);
	    process.exit(1);
	} else {
	    logger.debug(`k set to ${options.K}`);
	    if (!otherSeqPaths.length) otherSeqPaths = []
	    otherSeqPaths.unshift(seqpath1, seqpath2);
	    logger.info(`Calculating correlation matrix of normalized profiles of the following sequence files:\n${otherSeqPaths.map((x)=>"\t"+x).join('\n')}`)
	    let data = []
	    let profs = Promise.each(otherSeqPaths, function(i){
		return new Promise(function(resolve, reject){
		    reader(options.K, i, options.strandSpecific).then(function(j){
			data.push(j);
			resolve(j)
		    });
		});
	    });

	    return Promise.all(profs).then(function(){
		logger.debug("All profiles loaded. Calculating correlations")
		return data.map(function(x, i){
		    return data.map(function(y, j){
			if (x.profile === y.profile) {
			    if (options.distance === 'correlation') return 1;
			    else if (options.distance === 'euclidean') return 0;
			    else {
				logger.error(`kmerjs-distance has not implemented distance metric '${options.distance}'`);
				process.exit(1)
			    }
			} else if (j > i) { // Only compute each distance once.
			    return '';
			}else {
			    if (options.distance === 'correlation') return x.correlation(x.profile, y.profile);
			    else if (options.distance === 'euclidean') return x.euclidean(x.profile, y.profile);
			    else {
				logger.error(`kmerjs-distance has not implemented distance metric '${options.distance}'`);
				process.exit(1)
			    }
			}
		    }).reduce(function(total, z){
			total.push(z);
			return total;
		    }, []);
		});


	    }).then(function(corr){
		// Fill in upper triangular missing values
		for (i=0; i < corr.length; i++){
		    for (j=0; j < corr.length; j++){
			if (j > i) {
			    corr[i][j] = corr[j][i];
			} else continue;
		    }
		}
		logger.info("Done");
		if (corr.length === 2) console.log(corr[1][0]);
		else console.log(corr.map((a) => a.join("\t")).join("\n"));
	    });
	}
    });
program.parse(process.argv);
