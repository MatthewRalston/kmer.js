#!/usr/bin/env node



const program = require('commander');
const Type = require('type-of-is');


// Kmer.js

const logger = require('./../app/loadLogger').logger;
const reader = require('./../app/readProfile').getProfile;
// Initialize
var k = 12;



// CLI
program
    .description('Writes a vector on integers of kmer counts to STDOUT')
    .arguments('<seqpath>')
    .option('-k <k>', 'k-mer size to use', parseInt)
    .option('-n, --norm', 'Enable normalization (i.e. remove magnitude)')
    .option('--strand-specific', 'Read profile from forward strand only')
    .option('-v, --verbose', 'Enable log-level debugging')
    .action(function(seqpath, options){
	if (options.strandSpecific === undefined) options.strandSpecific = false;
	if (options.verbose) logger.level = 'debug';
	if (options.K === undefined) options.K = k;
	if (!Type.is(options.K, Number)) {
	    logger.error(`option k must be an integer: '${options.K}'`);
	    process.exit(1);
	} else {
	    logger.debug(`k set to ${options.K}`);
	    reader(options.K, seqpath, options.strandSpecific).then(function(kmer){
		if (options.norm) {
		    logger.debug("Calculating normalized count vector");
		    let profArray = Array.from(kmer.profile);
		    let norm = profArray.map((x) => x*x).reduce((x,y) => x+y);
		    console.log(profArray.map((x) => x/norm).join("\n"));
		} else {
		    console.log(kmer.profile.join("\n"));
		}
	    }).catch(function(err){
		logger.debug(err);
		throw err;
	    });
	}
    });
program.parse(process.argv);




